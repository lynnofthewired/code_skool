03/11/2024


**PART TWO**

we're gonna use a command line tool called "Create React App", it generates a starter React project, comes fully baked with all the setup and config that we need like Babble and Webpack which we'll need to compile everything later into production-ready Javascript, instead of having to configure all of that ourselves.

type this in the terminal: "npx create-react-app lynn-blog", where "lynn-blog" is the name of the project.

That is going to make a new directory called "lynn-blog" with a bunch of shit inside. Here's what's inside:

node-modules - this is where the dependencies live, including the REact library, and other libraries. We'll never go in there, it just does its thing.

public - this is where everything goes that's public to the browser, like index.html, which, at least in this case, is where all of our REACT code is going to go, that is, inside of <div id="root"></div>

src - For this tutorial we're deleting the file "App.test.js".
The file "index.js" kickstarts the application. Responsible for taking the REACT componenets and mounting them to the DOM. See the function on line 7, where it takes the "<App />" and "renders" it in "ReactDOM", putting it inside "document.getElementById('root')", which is our "root" div from "index.html".
We're going to delete the file "reportWebVitals" as well, which means we're deleting its corresponding "import" in "index.js", and the function at the bottom of "index.js".
Finally, we're deleting "setupTests.js"

On line 8 in "index.js", you have <React.StrictMode>

In the top level of the project folder, you have "package.json". 
    Go into this and run one of the "scripts", "react-scripts start" in the terminal. which will look like "npm run start", but make sure you're in the "lynn-blog" directory.
    It will spin up the application on localhost:3000

Without the node_modules folder, the application will not run. If you ever download a REACT project from like, GitHub, it might not have the modules with it, since this folder contains the entire REACT library and is huge. You'll need to install it yourself using "npm install" in the terminal, and then "npm run start" will do its thing.


**PART 3**

React has componenets. A nav bar might be a component, an article might be a component., a sidebar, etc. Our job with React is to create these components. Each one will have their own templates, and also Javascript logic, like a "Logout" button would have. Which is great.

In our shit, we only have one component, and it can be seen in the "index.js" file, it's called "App". It kickstarts the application, as we know. All of the content we see on the default React page with that spinning Bohr model is called the Root component, and it is basically everything inside of that function called App. That function returns what looks like HTML code.

This function could be an arrow function...I guess?...but it must begin with a capital letter, which is weird, i.e., not JavaScript conventions. It is however, not HTML, it is actually JSX. Syntax is almost identical to HTML, but it is slightly different. We might end up thinking about this the same way we approach Wordpress PHP, although of course it would be doing completely different things in the DOm tree. 

One big differnce between JSX and HTML is the way you add class names, in JSX we're gonna be using camel case, and instead of having something like '<div class="">', you're gonna have '<div className="">'. this is because "class" is a reserved keyword in Javascript. This gets changed to "class" behind the curtain. 

We're gonna be going into App.js, go into the function called "App" and delete everything inside the '<div className="App">' container, and restart our template. Replace it with:

    <div className="content">
        <h1>Lynn's Blog</h1>
    </div>

I've also just gone ahead and styled  the CSS a little bit so that it's white text on black, and a monospace font. It's looking good.

One more thing: at the end of "App.js" you're always going to want to have this export line:

    export default App;

This exports the function called "App", which enables it to be imported into other files.


**PART 4**

Right now we have the title of our blog hard coded in H1 tags. A different way to do this is to store the title of the site in  a variable or constant, like so:

    const title = "Lynn's Blog";

This is going to go right inside of our function called "App". After that we will call the variable in the H1 tags by putting it inside of curly braces, like:

    <h1>{ title }</h1>

When we use curly braces like that, React knows we're trying to output dynamic data like a variable, and it will look for that data.

We can do this as many times as we want. If we want to use integers instead of strings to say, count how many likes something has, we'll do:

    const likes = 50;

and if we do that it will output as a string. Straightforward so far. But what we cannot do is objects. If you try something like:

    const person = {name: yoshi, age: 30}

that will break the system. But you can do arrays which will output as a string. You can do math that it will have to evaluate before outputting as a string, like:

    <p>{ Math.random() * 10 }</p>

